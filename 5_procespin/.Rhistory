map(x, +2)
map(x, (+2))
x
function(x) {x+1}
f <- function(x) {x+1}
map(x, f)
library(purrr)
f <- function (x) {
if (x<=2) {
return(2/3)
} else {
return(-2/3*(x-3))
}
}
simf <- function (n) {
x <- runif(n, 1, 3)
map(x, f)
}
draws <- simf(100)
hist(draws)
draws
list(draws)
c(runif(n, 1, 3))
c(runif(10, 1, 3))
class(c(runif(10, 1, 3)))
library(purrr)
f <- function (x) {
if (x<=2) {
2/3
} else {
-2/3*(x-3)
}
}
simf <- function (n) {
x <- c(runif(n, 1, 3))
map(x, f)
}
draws <- simf(100)
hist(draws)
sample_mean <- mean(draws)
class(draws)
as.numeric(draws)
library(purrr)
f <- function (x) {
if (x<=2) {
2/3
} else {
-2/3*(x-3)
}
}
simf <- function (n) {
x <- c(runif(n, 1, 3))
for (i in x) {
i <- f(i)
}
}
draws <- simf(100)
draws
library(purrr)
f <- function (x) {
if (x<=2) {
2/3
} else {
-2/3*(x-3)
}
}
simf <- function (n) {
x <- c(runif(n, 1, 3))
for (i in 1:length(x)) {
x[i] <- f(i)
}
}
draws <- simf(100)
draws
library(purrr)
f <- function (x) {
if (x<=2) {
2/3
} else {
-2/3*(x-3)
}
}
simf <- function (n) {
x <- c(runif(n, 1, 3))
map_dbl(x, f)
}
draws <- simf(100)
draws
hist(draws)
library(purrr)
set.seed(0)
f <- function (x) {
if (x<=2) {
2/3
} else {
-2/3*(x-3)
}
}
simf <- function (n) {
x <- c(runif(n, 1, 3))
map_dbl(x, f)
}
draws <- simf(100)
draws
hist(draws, breaks=50)
sample_mean <- mean(draws)
sample_mean
16/9
library(purrr)
set.seed(0)
f <- function (x) {
if (x<=2) {
2/3
} else {
-2/3*(x-3)
}
}
simf <- function (n) {
x <- c(runif(n, 1, 3))
map_dbl(x, f)
}
draws <- simf(1000)
draws
hist(draws, breaks=50)
sample_mean <- mean(draws)
sample_mean
runif(5, 1, 3)
plot(draws, breaks=50)
sample_mean <- mean(draws)
hist(draws, breaks=50)
?ParameterSet
install.packages("distr6")
library(distr6)
pdf <- function(x){
pdf <- numeric(length(x))
lower <- self$getParameterValue("lower")
middle <- self$getParameterValue("middle")
upper <- self$getParameterValue("upper")
pdf[x >= lower & x <= middle] = 2/3
pdf[x > middle & x <= upper] = -2/3*(x-3)
return(pdf)
}
pdf <- function(x){
pdf <- numeric(length(x))
lower <- self$getParameterValue("lower")
middle <- self$getParameterValue("middle")
upper <- self$getParameterValue("upper")
pdf[x >= lower & x <= middle] = 2/3
pdf[x > middle & x <= upper] = -2/3*(x-3)
return(pdf)
}
ps <- ParameterSet$new(id = list("lower","middle", "upper"), value = c(1,2,3),
support = list(set6::Reals$new(),set6::Reals$new()),
settable = list(TRUE, TRUE))
print(ps)
print(ps)
support <- set6::Interval$new(1, 3)
type <- set6::Reals$new()
U <- Distribution$new(name = "F", pdf = pdf, parameters = ps, support = support,
type = type)
U$traits
u$pdf[1.4]
U$pdf[1.4]
U$pdf(1.4)
draws <- U$new(size = 100)
U$rand(10)
decorate(U, c("CoreStatistics", "ExoticStatistics", "FunctionImputation"))
U$traits
U$pdf(1.4)
n <- U$new()
summary(U)
16/9
37/162
?U
?Distribution
U$rand(10)
library(distr6)
pdf <- function(x){
pdf <- numeric(length(x))
lower <- self$getParameterValue("lower")
middle <- self$getParameterValue("middle")
upper <- self$getParameterValue("upper")
pdf[x >= lower & x <= middle] = 2/3
pdf[x > middle & x <= upper] = -2/3*(x-3)
return(pdf)
}
ps <- ParameterSet$new(id = list("lower","middle", "upper"), value = c(1,2,3),
support = list(set6::Reals$new(),set6::Reals$new()),
settable = list(TRUE, TRUE))
print(ps)
support <- set6::Interval$new(1, 3)
type <- set6::Reals$new()
U <- Distribution$new(name = "F",
pdf = pdf,
parameters = ps,
support = support,
type = type)
decorate(U, c("CoreStatistics", "ExoticStatistics", "FunctionImputation"))
U$traits
summary(U)
U$rand(20,TRUE)
a <- U$rand(20,TRUE)
a
b <- Binomial$new()
b$rand(10)
U$rand(1)
cdf <- function(x){
cdf <- numeric(length(x))
lower <- self$getParameterValue("lower")
upper <- self$getParameterValue("upper")
cdf[x >= upper] = 1
cdf[x >= lower & x < upper] = (x - lower) / (upper - lower)
return(cdf)
}
U <- Distribution$new(name = "Uniform", short_name = "unif", type = set6::Reals$new(),
support = set6::Interval$new(1, 10),  symmetric = TRUE, pdf = pdf, cdf = cdf, parameters = ps, description = "Custom uniform distribution")
decorate(U, c("CoreStatistics", "ExoticStatistics", "FunctionImputation"))
U$mean()
#> Results from numeric calculations are approximate only. Better results may be available.
#> [1] 5.5
U$variance()
#> Results from numeric calculations are approximate only. Better results may be available.
#> [1] 6.75
U$hazard(5)
#> [1] 0.25
U$rand(5)
#> [1] 0.25
U$rand(5)
cdf <- function(x){
cdf <- numeric(length(x))
lower <- self$getParameterValue("lower")
upper <- self$getParameterValue("upper")
cdf[x >= upper] = 1
cdf[x >= lower & x < upper] = (x - lower) / (upper - lower)
return(cdf)
}
U <- Distribution$new(name = "Uniform", short_name = "unif", type = set6::Reals$new(),
support = set6::Interval$new(1, 10),  symmetric = TRUE, pdf = pdf, cdf = cdf, parameters = ps, description = "Custom uniform distribution")
decorate(U, c("CoreStatistics", "ExoticStatistics", "FunctionImputation"))
install.packages("pracma")
install.packages("GoFKernel")
library(distr6)
pdf <- function(x){
pdf <- numeric(length(x))
lower <- self$getParameterValue("lower")
middle <- self$getParameterValue("middle")
upper <- self$getParameterValue("upper")
pdf[x >= lower & x <= middle] = 2/3
pdf[x > middle & x <= upper] = -2/3*(x-3)
return(pdf)
}
ps <- ParameterSet$new(id = list("lower","middle", "upper"), value = c(1,2,3),
support = list(set6::Reals$new(),set6::Reals$new()),
settable = list(TRUE, TRUE))
print(ps)
support <- set6::Interval$new(1, 3)
type <- set6::Reals$new()
U <- Distribution$new(name = "F",
pdf = pdf,
parameters = ps,
support = support,
type = type)
decorate(U, c("CoreStatistics", "ExoticStatistics", "FunctionImputation"))
U$traits
summary(U)
U$rand(20)
sample_mean <- mean(a)
a <- U$rand(100)
sample_mean <- mean(a)
sample_mean
library(distr6)
pdf <- function(x){
pdf <- numeric(length(x))
lower <- self$getParameterValue("lower")
middle <- self$getParameterValue("middle")
upper <- self$getParameterValue("upper")
pdf[x >= lower & x <= middle] = 2/3
pdf[x > middle & x <= upper] = -2/3*(x-3)
return(pdf)
}
ps <- ParameterSet$new(id = list("lower","middle", "upper"), value = c(1,2,3),
support = list(set6::Reals$new(),set6::Reals$new()),
settable = list(TRUE, TRUE))
print(ps)
support <- set6::Interval$new(1, 3)
type <- set6::Reals$new()
U <- Distribution$new(name = "F",
pdf = pdf,
parameters = ps,
support = support,
type = type)
decorate(U, c("CoreStatistics", "ExoticStatistics", "FunctionImputation"))
U$traits
summary(U)
a <- U$rand(100000)
sample_mean <- mean(a)
sample_mean
library(distr6)
set.seed(42)
pdf <- function(x){
pdf <- numeric(length(x))
lower <- self$getParameterValue("lower")
middle <- self$getParameterValue("middle")
upper <- self$getParameterValue("upper")
pdf[x >= lower & x <= middle] = 2/3
pdf[x >= middle & x <= upper] = -2/3*(x-3)
return(pdf)
}
ps <- ParameterSet$new(id = list("lower","middle", "upper"), value = c(1,2,3),
support = list(set6::Reals$new(),set6::Reals$new()),
settable = list(TRUE, TRUE))
library(distr6)
set.seed(42)
pdf <- function(x){
pdf <- numeric(length(x))
lower <- self$getParameterValue("lower")
middle <- self$getParameterValue("middle")
upper <- self$getParameterValue("upper")
pdf[x >= lower & x <= middle] = 2/3
pdf[x >= middle & x <= upper] = -2/3*(x-3)
return(pdf)
}
cdf <- function(x){
cdf <- numeric(length(x))
lower <- self$getParameterValue("lower")
middle <- self$getParameterValue("middle")
upper <- self$getParameterValue("upper")
cdf[x>= upper] = 1
cdf[x >= middle & x < upper] =-1/3*x*x+2*x-2
cdf[x >= lower & x < middle] = 2/3*x-2/3
return(cdf)
}
ps <- ParameterSet$new(id = list("lower","middle", "upper"), value = c(1,2,3),
support = list(set6::Reals$new(),set6::Reals$new(),set6::Reals$new()),
settable = list(TRUE, TRUE, TRUE))
print(ps)
support <- set6::Interval$new(1, 3)
type <- set6::Reals$new()
U <- Distribution$new(name = "F",
pdf = pdf,
cdf = cdf,
parameters = ps,
support = support,
type = type)
decorate(U, c("CoreStatistics", "ExoticStatistics", "FunctionImputation"))
U$traits
summary(U)
a <- U$rand(100000)
sample_mean <- mean(a)
sample_mean
library(distr6)
set.seed(42)
pdf <- function(x){
pdf <- numeric(length(x))
lower <- self$getParameterValue("lower")
middle <- self$getParameterValue("middle")
upper <- self$getParameterValue("upper")
pdf[x >= lower & x <= middle] = 2/3
pdf[x > middle & x <= upper] = -2/3*(x-3)
return(pdf)
}
cdf <- function(x){
cdf <- numeric(length(x))
lower <- self$getParameterValue("lower")
middle <- self$getParameterValue("middle")
upper <- self$getParameterValue("upper")
cdf[x>= upper] = 1
cdf[x >= middle & x < upper] =-1/3*x*x+2*x-2
cdf[x >= lower & x < middle] = 2/3*x-2/3
return(cdf)
}
ps <- ParameterSet$new(id = list("lower","middle", "upper"), value = c(1,2,3),
support = list(set6::Reals$new(),set6::Reals$new(),set6::Reals$new()),
settable = list(TRUE, TRUE, TRUE))
print(ps)
support <- set6::Interval$new(1, 3)
type <- set6::Reals$new()
U <- Distribution$new(name = "F",
pdf = pdf,
cdf = cdf,
parameters = ps,
support = support,
type = type)
decorate(U, c("CoreStatistics", "ExoticStatistics", "FunctionImputation"))
U$traits
summary(U)
a <- U$rand(100000)
library(distr6)
set.seed(42)
pdf <- function(x){
pdf <- numeric(length(x))
lower <- self$getParameterValue("lower")
middle <- self$getParameterValue("middle")
upper <- self$getParameterValue("upper")
pdf[x >= lower & x < middle] = 2/3
pdf[x >= middle & x < upper] = -2/3*(x-3)
return(pdf)
}
cdf <- function(x){
cdf <- numeric(length(x))
lower <- self$getParameterValue("lower")
middle <- self$getParameterValue("middle")
upper <- self$getParameterValue("upper")
cdf[x>= upper] = 1
cdf[x >= middle & x < upper] =-1/3*x*x+2*x-2
cdf[x >= lower & x < middle] = 2/3*x-2/3
return(cdf)
}
ps <- ParameterSet$new(id = list("lower","middle", "upper"), value = c(1,2,3),
support = list(set6::Reals$new(),set6::Reals$new(),set6::Reals$new()),
settable = list(TRUE, TRUE, TRUE))
print(ps)
support <- set6::Interval$new(1, 3)
type <- set6::Reals$new()
U <- Distribution$new(name = "F",
pdf = pdf,
cdf = cdf,
parameters = ps,
support = support,
type = type)
decorate(U, c("CoreStatistics", "ExoticStatistics", "FunctionImputation"))
U$traits
summary(U)
a <- U$rand(100000)
sample_mean <- mean(a)
sample_mean
library(distr6)
set.seed(42)
pdf <- function(x){
pdf <- numeric(length(x))
lower <- self$getParameterValue("lower")
middle <- self$getParameterValue("middle")
upper <- self$getParameterValue("upper")
pdf[x >= lower & x < middle] = 2/3
pdf[x >= middle & x < upper] = -2/3*(x-3)
return(pdf)
}
cdf <- function(x){
cdf <- numeric(length(x))
lower <- self$getParameterValue("lower")
middle <- self$getParameterValue("middle")
upper <- self$getParameterValue("upper")
cdf[x>= upper] = 1
cdf[x >= middle & x < upper] =-1/3*x*x+2*x-2
cdf[x >= lower & x < middle] = 2/3*x-2/3
return(cdf)
}
ps <- ParameterSet$new(id = list("lower","middle", "upper"), value = c(1,2,3),
support = list(set6::Reals$new(),set6::Reals$new(),set6::Reals$new()),
settable = list(TRUE, TRUE, TRUE))
print(ps)
support <- set6::Interval$new(1, 3)
type <- set6::Reals$new()
U <- Distribution$new(name = "F",
pdf = pdf,
cdf = cdf,
parameters = ps,
support = support,
type = type)
decorate(U, c("CoreStatistics", "ExoticStatistics", "FunctionImputation"))
U$traits
summary(U)
sample_mean <- mean(U$rand(100))
sample_mean
sample_mean <- mean(U$rand(10))
sample_mean
sample_mean <- mean(U$rand(10000000))
sample_mean
library(shiny); runApp('Programming/R_markdowns_shiny-apps/3_french_population/3_french_population.R')
runApp('Programming/R_markdowns_shiny-apps/3_french_population/3_french_population.R')
# if needed, set your working directory usingL
getwd()
setwd("~/Programming/R_markdowns_shiny-apps/5_procespin")
# if needed, set your working directory usingL
getwd()
setwd("~/Programming/R_markdowns_shiny-apps/5_procespin")
data <- read.csv('procespin.txt')
data
data <- read.csv("procespin.txt", sep="\t")
data
ncol(data)
nrow(data)
summary(data)
# We create the response variable ln(y)
data$lny <- ln(data$y)
# We create the response variable ln(y)
data$lny <- log(data$y)
data
plot(data$y, data$lny)
plot(data$lny)
data$y,
plot(data$y, data$lny)
simple_model = lm(lny~x1+x2+x3+x4+x5+x6+x7+x8+x9+x10,
data=data)
summary(simple_model)
simple_model$rank
plot(simple_model)
# We create the response variable ln(y) and plot the result
data$lny <- log(data$y)
plot(data$y, data$lny)
simple_model = lm(lny~x1+x2+x3+x4+x5+x6+x7+x8+x9+x10,
data=data)
summary(simple_model)
simple_model$rank
plot(simple_model)
simple_model = lm(lny ~ .,
data=data %>% select(-y))
data %>% select(-y)
library(tidyverse)
simple_model = lm(lny ~ .,
data = data %>% select(-y))
summary(simple_model)
